# Generated by Django 3.0.5 on 2020-04-09 00:58

import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import fms_core.schema_validators
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Container',
            fields=[
                ('kind', models.CharField(choices=[('96-well plate', '96-well plate'), ('384-well plate', '384-well plate'), ('tube', 'tube'), ('tube box 9x9', 'tube box 9x9'), ('tube box 10x10', 'tube box 10x10'), ('tube rack 8x12', 'tube rack 8x12'), ('drawer', 'drawer'), ('freezer rack', 'freezer rack'), ('freezer', 'freezer'), ('room', 'room'), ('box', 'box')], help_text='What kind of container this is. Dictates the coordinate system and other container-specific properties.', max_length=20)),
                ('name', models.CharField(help_text='Unique name for the container.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.-_]+$'))])),
                ('barcode', models.CharField(help_text='Unique container barcode.', max_length=200, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.-_]+$'))])),
                ('coordinates', models.CharField(blank=True, help_text='Coordinates of this container within the parent container.', max_length=20)),
                ('comment', models.TextField(blank=True)),
                ('location', models.ForeignKey(blank=True, help_text='An existing (parent) container this container is located inside of.', limit_choices_to={'kind__in': ('tube box 9x9', 'tube box 10x10', 'tube rack 8x12', 'drawer', 'freezer rack', 'freezer', 'room', 'box')}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='fms_core.Container')),
            ],
        ),
        migrations.CreateModel(
            name='Individual',
            fields=[
                ('participant_id', models.CharField(max_length=200, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=200)),
                ('taxon', models.CharField(choices=[('Homo sapiens', 'Homo sapiens'), ('Mus musculus', 'Mus musculus')], max_length=20)),
                ('sex', models.CharField(choices=[('M', 'M'), ('F', 'F'), ('Unknown', 'Unknown')], max_length=10)),
                ('pedigree', models.CharField(blank=True, max_length=200)),
                ('cohort', models.CharField(blank=True, max_length=200)),
                ('father', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='father_of', to='fms_core.Individual')),
                ('mother', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='mother_of', to='fms_core.Individual')),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biospecimen_type', models.CharField(choices=[('DNA', 'DNA'), ('RNA', 'RNA'), ('BLOOD', 'BLOOD'), ('SALIVA', 'SALIVA')], max_length=200)),
                ('name', models.CharField(max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.-_]+$'))])),
                ('alias', models.CharField(blank=True, max_length=200)),
                ('volume_history', django.contrib.postgres.fields.jsonb.JSONField(validators=[fms_core.schema_validators.JsonSchemaValidator({'$id': 'fms:volume', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Schema used to define volume and its updates.', 'items': {'additionalProperties': False, 'if': {'properties': {'update_type': {'const': ['extraction']}}, 'required': ['extracted_sample_id']}, 'properties': {'date': {'format': 'date', 'type': 'string'}, 'extracted_sample_id': {'type': 'string'}, 'update_type': {'enum': ['extraction', 'update'], 'type': 'string'}, 'volume_value': {'type': 'string'}}, 'required': ['update_type', 'volume_value', 'date'], 'type': 'object'}, 'minItems': 1, 'title': 'Volume schema', 'type': 'array'})])),
                ('concentration', models.DecimalField(blank=True, decimal_places=3, help_text='Concentration, ng/ÂµL', max_digits=20, null=True)),
                ('depleted', models.BooleanField(default=False)),
                ('experimental_group', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('collection_site', models.CharField(max_length=200)),
                ('tissue_source', models.CharField(blank=True, max_length=200)),
                ('reception_date', models.DateField(default=django.utils.timezone.now)),
                ('phenotype', models.CharField(blank=True, max_length=200)),
                ('comment', models.TextField(blank=True)),
                ('coordinates', models.CharField(blank=True, max_length=10)),
                ('volume_used', models.DecimalField(blank=True, decimal_places=3, max_digits=20, null=True)),
                ('container', models.ForeignKey(limit_choices_to={'kind__in': ('96-well plate', '384-well plate', 'tube')}, on_delete=django.db.models.deletion.PROTECT, related_name='samples', to='fms_core.Container')),
                ('extracted_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='extractions', to='fms_core.Sample')),
                ('individual', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='fms_core.Individual')),
            ],
            options={
                'unique_together': {('container', 'coordinates')},
            },
        ),
        migrations.CreateModel(
            name='ExtractedSample',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('fms_core.sample',),
            managers=[
                ('manager', django.db.models.manager.Manager()),
            ],
        ),
    ]
