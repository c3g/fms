# Generated by Django 3.0.5 on 2020-04-23 14:56

import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import fms_core.schema_validators
import re


class Migration(migrations.Migration):

    dependencies = [
        ('fms_core', '0005_auto_20200420_1738'),
    ]

    operations = [
        migrations.AlterField(
            model_name='container',
            name='comment',
            field=models.TextField(blank=True, help_text='Other relevant information about the container.'),
        ),
        migrations.AlterField(
            model_name='individual',
            name='cohort',
            field=models.CharField(blank=True, help_text='Label to group some individuals in a specific study.', max_length=200),
        ),
        migrations.AlterField(
            model_name='individual',
            name='father',
            field=models.ForeignKey(blank=True, help_text='Father of the individual.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='father_of', to='fms_core.Individual'),
        ),
        migrations.AlterField(
            model_name='individual',
            name='mother',
            field=models.ForeignKey(blank=True, help_text='Mother of the individual.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='mother_of', to='fms_core.Individual'),
        ),
        migrations.AlterField(
            model_name='individual',
            name='name',
            field=models.CharField(help_text='Unique identifier for the individual.', max_length=200, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='individual',
            name='pedigree',
            field=models.CharField(blank=True, help_text='Common ID to associate children and parents.', max_length=200),
        ),
        migrations.AlterField(
            model_name='individual',
            name='sex',
            field=models.CharField(choices=[('M', 'M'), ('F', 'F'), ('Unknown', 'Unknown')], help_text='Sex of the individual.', max_length=10),
        ),
        migrations.AlterField(
            model_name='individual',
            name='taxon',
            field=models.CharField(choices=[('Homo sapiens', 'Homo sapiens'), ('Mus musculus', 'Mus musculus')], help_text='Taxonomic group of a species.', max_length=20),
        ),
        migrations.AlterField(
            model_name='sample',
            name='alias',
            field=models.CharField(blank=True, help_text='Alternative sample name given by the collaborator or customer.', max_length=200),
        ),
        migrations.AlterField(
            model_name='sample',
            name='biospecimen_type',
            field=models.CharField(choices=[('DNA', 'DNA'), ('RNA', 'RNA'), ('BLOOD', 'BLOOD'), ('SALIVA', 'SALIVA')], help_text='Biological material collected from study subject during the conduct of a genomic study project.', max_length=200),
        ),
        migrations.AlterField(
            model_name='sample',
            name='collection_site',
            field=models.CharField(help_text='The facility designated for the collection of samples.', max_length=200),
        ),
        migrations.AlterField(
            model_name='sample',
            name='comment',
            field=models.TextField(blank=True, help_text='Other relevant information about the sample.'),
        ),
        migrations.AlterField(
            model_name='sample',
            name='container',
            field=models.ForeignKey(help_text='Designated location of the sample.', limit_choices_to={'kind__in': ('96-well plate', '384-well plate', 'tube')}, on_delete=django.db.models.deletion.PROTECT, related_name='samples', to='fms_core.Container'),
        ),
        migrations.AlterField(
            model_name='sample',
            name='experimental_group',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, help_text='Sample group having some common characteristics. It is the way to designate a subgroup within a study.', validators=[fms_core.schema_validators.JsonSchemaValidator({'$id': 'fms:experimental_group', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Schema used to define experimental groups for a sample.', 'items': {'type': 'string'}, 'title': 'Experimental group schema', 'type': 'array', 'uniqueItems': True})]),
        ),
        migrations.AlterField(
            model_name='sample',
            name='individual',
            field=models.ForeignKey(help_text='Individual associated with the sample.', on_delete=django.db.models.deletion.PROTECT, to='fms_core.Individual'),
        ),
        migrations.AlterField(
            model_name='sample',
            name='name',
            field=models.CharField(help_text='Sample name.', max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.-_]+$'))]),
        ),
        migrations.AlterField(
            model_name='sample',
            name='phenotype',
            field=models.CharField(blank=True, help_text='Sample phenotype.', max_length=200),
        ),
        migrations.AlterField(
            model_name='sample',
            name='reception_date',
            field=models.DateField(default=django.utils.timezone.now, help_text='Date of the sample reception.'),
        ),
        migrations.AlterField(
            model_name='sample',
            name='tissue_source',
            field=models.CharField(blank=True, choices=[('Blood', 'Blood'), ('Saliva', 'Saliva'), ('Tumor', 'Tumor'), ('Plasma', 'Plasma'), ('Buffy coat', 'Buffy coat'), ('Tail', 'Tail'), ('Cells', 'Cells')], help_text='Can only be specified if the biospecimen type is DNA or RNA.', max_length=200),
        ),
        migrations.AlterField(
            model_name='sample',
            name='volume_history',
            field=django.contrib.postgres.fields.jsonb.JSONField(help_text='Volume of the sample in µL.', validators=[fms_core.schema_validators.JsonSchemaValidator({'$id': 'fms:volume', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Schema used to define volume and its updates.', 'items': {'additionalProperties': False, 'if': {'properties': {'update_type': {'const': ['extraction']}}, 'required': ['extracted_sample_id']}, 'properties': {'date': {'format': 'date-time', 'type': 'string'}, 'extracted_sample_id': {'type': 'integer'}, 'update_type': {'enum': ['extraction', 'update'], 'type': 'string'}, 'volume_value': {'type': 'string'}}, 'required': ['update_type', 'volume_value', 'date'], 'type': 'object'}, 'minItems': 1, 'title': 'Volume schema', 'type': 'array'})], verbose_name='volume history in µL'),
        ),
    ]
